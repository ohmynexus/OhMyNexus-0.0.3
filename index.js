const _0x5c1758 = _0x586e;
(function (_0x418b37, _0x1ac4cb) {
    const _0x185ced = _0x586e,
        _0x4a8eb6 = _0x418b37();
    while (!![]) {
        try {
            const _0x423cfc = -parseInt(_0x185ced(0x15a)) / 0x1 * (-parseInt(_0x185ced(0x180)) / 0x2) + parseInt(_0x185ced(0x16f)) / 0x3 * (parseInt(_0x185ced(0x18b)) / 0x4) + -parseInt(_0x185ced(0x18e)) / 0x5 + -parseInt(_0x185ced(0x156)) / 0x6 * (parseInt(_0x185ced(0x154)) / 0x7) + -parseInt(_0x185ced(0x19c)) / 0x8 * (parseInt(_0x185ced(0x193)) / 0x9) + -parseInt(_0x185ced(0x194)) / 0xa + parseInt(_0x185ced(0x172)) / 0xb;
            if (_0x423cfc === _0x1ac4cb) break;
            else _0x4a8eb6['push'](_0x4a8eb6['shift']());
        } catch (_0x38f9de) {
            _0x4a8eb6['push'](_0x4a8eb6['shift']());
        }
    }
}(_0x20d0, 0x62bda));

function _0x1595(_0x1632c1, _0x5631d9) {
    const _0x23cff3 = _0x3a87();
    return _0x1595 = function (_0x476b9f, _0x3b1681) {
        _0x476b9f = _0x476b9f - 0x159;
        let _0x3c2c92 = _0x23cff3[_0x476b9f];
        return _0x3c2c92;
    }, _0x1595(_0x1632c1, _0x5631d9);
}

function _0x3a87() {
    const _0x4e9e8b = _0x586e,
        _0x2ada66 = [_0x4e9e8b(0x185), 'argv', _0x4e9e8b(0x171), _0x4e9e8b(0x196), _0x4e9e8b(0x155), _0x4e9e8b(0x15c), _0x4e9e8b(0x19b), _0x4e9e8b(0x18d), _0x4e9e8b(0x186), 'PORT', _0x4e9e8b(0x169), 'CLUSTER_COUNT', _0x4e9e8b(0x14d), _0x4e9e8b(0x174), _0x4e9e8b(0x191), _0x4e9e8b(0x176), 'No error stack available', _0x4e9e8b(0x198), _0x4e9e8b(0x17f), '88ZPeRlx', 'center', _0x4e9e8b(0x184), _0x4e9e8b(0x18c), _0x4e9e8b(0x173), _0x4e9e8b(0x18f), _0x4e9e8b(0x197), _0x4e9e8b(0x162), 'moment', 'say', '738493TQUtmN', _0x4e9e8b(0x190), _0x4e9e8b(0x17c), _0x4e9e8b(0x14e), _0x4e9e8b(0x159), _0x4e9e8b(0x15d), '197430BTcKPi', _0x4e9e8b(0x17a), _0x4e9e8b(0x183), '11vqJGVo', 'Cluster Master (Id ', _0x4e9e8b(0x151), _0x4e9e8b(0x166), _0x4e9e8b(0x17e), _0x4e9e8b(0x168), '485730MwgCgt', _0x4e9e8b(0x170), _0x4e9e8b(0x15e), _0x4e9e8b(0x157), _0x4e9e8b(0x16c), '9spSApX', _0x4e9e8b(0x16d), _0x4e9e8b(0x187), _0x4e9e8b(0x152), _0x4e9e8b(0x175), 'message', _0x4e9e8b(0x163), 'error_log_', '5739730szFvKR', _0x4e9e8b(0x161), _0x4e9e8b(0x19a), 'fork', _0x4e9e8b(0x177), _0x4e9e8b(0x164), _0x4e9e8b(0x195), _0x4e9e8b(0x18a), _0x4e9e8b(0x158), _0x4e9e8b(0x16e), _0x4e9e8b(0x17d), _0x4e9e8b(0x14f), _0x4e9e8b(0x150), _0x4e9e8b(0x179), 'Exited with code: null. Restarting...', _0x4e9e8b(0x14c), _0x4e9e8b(0x165), _0x4e9e8b(0x153), 'shift', 'format', _0x4e9e8b(0x182)];
    return _0x3a87 = function () {
        return _0x2ada66;
    }, _0x3a87();
}
const _0x458f3a = _0x1595;
(function (_0xc6ab73, _0x10951f) {
    const _0x58d469 = _0x586e,
        _0xc38ba6 = _0x1595,
        _0x36c247 = _0xc6ab73();
    while (!![]) {
        try {
            const _0x3914f9 = -parseInt(_0xc38ba6(0x165)) / 0x1 * (parseInt(_0xc38ba6(0x1a4)) / 0x2) + -parseInt(_0xc38ba6(0x181)) / 0x3 * (parseInt(_0xc38ba6(0x159)) / 0x4) + parseInt(_0xc38ba6(0x15d)) / 0x5 + -parseInt(_0xc38ba6(0x15a)) / 0x6 + parseInt(_0xc38ba6(0x199)) / 0x7 * (-parseInt(_0xc38ba6(0x18f)) / 0x8) + parseInt(_0xc38ba6(0x15f)) / 0x9 * (parseInt(_0xc38ba6(0x167)) / 0xa) + parseInt(_0xc38ba6(0x1a2)) / 0xb * (parseInt(_0xc38ba6(0x186)) / 0xc);
            if (_0x3914f9 === _0x10951f) break;
            else _0x36c247[_0x58d469(0x196)](_0x36c247[_0x58d469(0x16a)]());
        } catch (_0x14d7cf) {
            _0x36c247[_0x58d469(0x196)](_0x36c247[_0x58d469(0x16a)]());
        }
    }
}(_0x3a87, 0xabcb2));
const _0x476ee0 = _0x52fb;
(function (_0x114dea, _0x245693) {
    const _0x347b19 = _0x586e,
        _0x1cb581 = _0x1595,
        _0x5c816f = _0x52fb,
        _0x56e05a = _0x114dea();
    while (!![]) {
        try {
            const _0x37be70 = -parseInt(_0x5c816f(0xc4)) / 0x1 + -parseInt(_0x5c816f(0x95)) / 0x2 + parseInt(_0x5c816f(0x9f)) / 0x3 * (parseInt(_0x5c816f(0xc2)) / 0x4) + -parseInt(_0x5c816f(0x8f)) / 0x5 + -parseInt(_0x5c816f(0x98)) / 0x6 * (parseInt(_0x5c816f(0xa4)) / 0x7) + -parseInt(_0x5c816f(0x9d)) / 0x8 + parseInt(_0x5c816f(0x8d)) / 0x9 * (parseInt(_0x5c816f(0xa3)) / 0xa);
            if (_0x37be70 === _0x245693) break;
            else _0x56e05a[_0x1cb581(0x17f)](_0x56e05a[_0x347b19(0x16a)]());
        } catch (_0x328a79) {
            _0x56e05a[_0x1cb581(0x17f)](_0x56e05a[_0x1cb581(0x179)]());
        }
    }
}(_0x4ae8, 0x2548c));

function _0x586e(_0x35515d, _0x5697e8) {
    const _0x20d013 = _0x20d0();
    return _0x586e = function (_0x586ef4, _0x2ef2b8) {
        _0x586ef4 = _0x586ef4 - 0x14c;
        let _0x43128d = _0x20d013[_0x586ef4];
        return _0x43128d;
    }, _0x586e(_0x35515d, _0x5697e8);
}

function _0x52fb(_0x471f45, _0x11c469) {
    const _0x4da22b = _0x4ae8();
    return _0x52fb = function (_0x251b1d, _0x4ab470) {
        _0x251b1d = _0x251b1d - 0x8c;
        let _0x4bd272 = _0x4da22b[_0x251b1d];
        return _0x4bd272;
    }, _0x52fb(_0x471f45, _0x11c469);
}
const cluster = require(_0x458f3a(0x18d)),
    {
        spawn
    } = require(_0x476ee0(0xad)),
    path = require(_0x476ee0(0x93)),
    fs = require('fs'),
    moment = require(_0x476ee0(0xb1)),
    CFonts = require(_0x476ee0(0xc3)),
    config = require(_0x476ee0(0xc6)),
    {
        handleUnhandledRejection,
        handleUncaughtException
    } = require(_0x5c1758(0x178)),
    {
        fnctions
    } = require(_0x476ee0(0xb2));
let isRunning = ![];

function _0x20d0() {
    const _0x32b872 = ['Error writing log file:', '9097020qNvWvd', 'stderr', 'Error starting bot:', '783LrYtgZ', '1940580prhLWe', 'slice', 'push', 'send', 'cluster', 'ipc', 'uptime', 'pipe', '5888lOMCaN', 'OhMyNexus', 'process', 'join', ') is running', './lib/fnctions', '697208XtqxxF', 'YYYY-MM-DD_HH-mm-ss', 'natsxe-bot server is running on port ', '121506LKSbmC', '\x0a          Error Stack: ', '102chjMXn', '1963575AFGcPQ', 'main.js', 'data', '9759UyOBtK', 'tiny', '25206EObySa', 'uncaughtException', './config.json', 'watchFile', '549ZHMAub', ') died', '--max-old-space-size=', '2YCeKyR', 'cfonts', '220HnCmNC', 'Base Original: Sazumi Viki\x0aFind Us: https://ohmynexus.github.io | ig: @addykece_\x0aWhatsapp : wa.me/6282177779477\x0a', 'Exited with code:', '496VDKnfQ', '32609736JGoDug', 'shift', 'sazumi_ram_usage', '1526478WVulbh', '519872HzgRWp', 'writeFile', '6OWyDbu', 'isMaster', '210880LBCCMC', '5146262gDpzLK', 'inherit', 'Error log saved to:', 'kill', 'unhandledRejection', '10AAMWLP', './sazumiviki/fix', '\x0a          ===== Error Log - ', '\x0a          ===============================\x0a        ', 'system', 'console', 'pid', 'unwatchFile', 'error', '88GDuLni', '7fOUGCS', 'log', 'env', 'child_process', '.txt', 'toString', 'exit', 'reset', 'yellow', '287934THjJTb', '352644nykauj', 'path', 'RECEIVED', '579710YaLsMm'];
    _0x20d0 = function () {
        return _0x32b872;
    };
    return _0x20d0();
}
const sazumi_ram_usage = config[_0x476ee0(0x90)],
    PORT = process[_0x458f3a(0x1a1)][_0x476ee0(0xa5)] || 0x1f90;
process['on'](_0x476ee0(0xaa), handleUnhandledRejection), process['on'](_0x476ee0(0xab), handleUncaughtException);
if (cluster[_0x476ee0(0xb7)]) {
    console[_0x476ee0(0xa2)](_0x476ee0(0xa1) + process[_0x458f3a(0x171)] + _0x476ee0(0x92));
    const logoOptions = {
            'font': _0x5c1758(0x15b),
            'align': _0x476ee0(0x94),
            'colors': [_0x5c1758(0x17b)]
        },
        whatsappOptions = {
            'colors': [_0x5c1758(0x189)],
            'font': _0x476ee0(0x97),
            'align': _0x458f3a(0x190)
        };
    CFonts[_0x458f3a(0x198)](_0x476ee0(0xc0), logoOptions), CFonts[_0x476ee0(0xc5)](_0x476ee0(0xb0), whatsappOptions);
    const numClusters = process[_0x476ee0(0x96)][_0x458f3a(0x187)] || 0x1;
    for (let i = 0x0; i < numClusters; i++) {
        cluster[_0x458f3a(0x16a)]();
    }
    cluster['on'](_0x458f3a(0x161), _0x12c0d9 => {
        const _0xf98c4 = _0x458f3a,
            _0x4a3bee = _0x476ee0;
        console[_0x4a3bee(0xa2)](_0x4a3bee(0xaf) + _0x12c0d9[_0xf98c4(0x188)][_0x4a3bee(0xb4)] + _0xf98c4(0x168)), cluster[_0x4a3bee(0x9c)]();
    });
} else start(_0x476ee0(0xb3));

function _0x4ae8() {
    const _0xaa5191 = _0x5c1758,
        _0x5f1e58 = _0x458f3a,
        _0x30f05a = [_0x5f1e58(0x191), _0x5f1e58(0x193), 'Worker (Id ', _0x5f1e58(0x1a5), _0x5f1e58(0x197), _0x5f1e58(0x173), _0x5f1e58(0x16f), _0x5f1e58(0x171), _0x5f1e58(0x170), _0x5f1e58(0x194), _0x5f1e58(0x15b), _0x5f1e58(0x1a0), _0x5f1e58(0x19c), _0x5f1e58(0x175), _0x5f1e58(0x195), _0xaa5191(0x187), 'Error log saved to:', _0x5f1e58(0x18a), _0x5f1e58(0x174), _0x5f1e58(0x176), _0x5f1e58(0x1a6), _0x5f1e58(0x177), _0x5f1e58(0x16c), _0x5f1e58(0x16e), _0x5f1e58(0x198), _0x5f1e58(0x15c), _0x5f1e58(0x17a), _0x5f1e58(0x180), _0x5f1e58(0x169), _0x5f1e58(0x196), _0x5f1e58(0x16d), _0x5f1e58(0x19a), _0x5f1e58(0x18c), _0x5f1e58(0x19f), _0xaa5191(0x16b), _0x5f1e58(0x17d), _0x5f1e58(0x172), _0x5f1e58(0x192), _0x5f1e58(0x190), _0x5f1e58(0x160), _0x5f1e58(0x1a1), _0x5f1e58(0x19b), _0x5f1e58(0x15e), _0xaa5191(0x192), _0xaa5191(0x188), _0x5f1e58(0x184), _0x5f1e58(0x16a), _0x5f1e58(0x17e), _0x5f1e58(0x162), _0xaa5191(0x160), _0xaa5191(0x167), _0x5f1e58(0x1a3), _0xaa5191(0x182), _0x5f1e58(0x16b), _0xaa5191(0x181), _0x5f1e58(0x185), _0x5f1e58(0x166), _0xaa5191(0x15f), _0x5f1e58(0x182), _0xaa5191(0x199), _0x5f1e58(0x18b), _0x5f1e58(0x19e), _0x5f1e58(0x18e)];
    return _0x4ae8 = function () {
        return _0x30f05a;
    }, _0x4ae8();
}
async function start(_0x43527b) {
    const _0x4c21c1 = _0x458f3a,
        _0x36ec04 = _0x476ee0;
    if (isRunning) return;
    try {
        if (!await fnctions()) return;
        isRunning = !![];
        const _0x2ff259 = [path[_0x36ec04(0xb9)](__dirname, _0x43527b), ...process[_0x36ec04(0x91)][_0x36ec04(0x8c)](0x2)],
            _0x4de035 = spawn(process[_0x36ec04(0x91)][0x0], _0x2ff259, {
                'stdio': [_0x36ec04(0xae), _0x4c21c1(0x193), _0x36ec04(0xa8), _0x36ec04(0xa9)],
                'execArgv': [_0x36ec04(0xca) + sazumi_ram_usage]
            });
        let _0x29c335 = '';
        _0x4de035[_0x36ec04(0xbe)]['on'](_0x4c21c1(0x19d), _0x2581c7 => {
            const _0x1ba6e6 = _0x36ec04;
            _0x29c335 += _0x2581c7[_0x1ba6e6(0x9b)]();
        }), _0x4de035['on'](_0x4c21c1(0x164), _0x13f9f2 => {
            const _0x31a9dd = _0x4c21c1,
                _0x127f14 = _0x36ec04;
            console[_0x127f14(0xa2)](_0x31a9dd(0x183), _0x13f9f2);
            switch (_0x13f9f2) {
            case _0x127f14(0x9a):
                _0x4de035[_0x31a9dd(0x163)](), isRunning = ![], start(_0x43527b);
                break;
            case _0x31a9dd(0x169):
                _0x4de035[_0x127f14(0xbb)](process[_0x127f14(0xc9)]());
                break;
            }
        }), _0x4de035['on'](_0x36ec04(0xbc), _0x5007fd => {
            const _0x50c749 = _0x4c21c1,
                _0x297a8f = _0x36ec04;
            isRunning = ![], console[_0x297a8f(0xac)](_0x297a8f(0xa0), _0x5007fd);
            if (_0x5007fd !== null) {
                const _0x2906fc = moment()[_0x297a8f(0xc7)](_0x297a8f(0x9e)),
                    _0x40169b = _0x297a8f(0xa6) + _0x2906fc + _0x50c749(0x17c),
                    _0x3c12bf = path[_0x50c749(0x19c)](__dirname, _0x40169b),
                    _0x4b6234 = _0x297a8f(0xbf) + _0x2906fc + ' =====\x0a          Exit Code: ' + _0x5007fd + _0x297a8f(0xc8) + (_0x29c335 || _0x297a8f(0x8e)) + _0x297a8f(0xb8);
                fs[_0x297a8f(0xb5)](_0x3c12bf, _0x4b6234, _0xd9019 => {
                    const _0x1e694a = _0x297a8f;
                    _0xd9019 && console[_0x1e694a(0xac)](_0x1e694a(0xb6), _0xd9019), console[_0x1e694a(0xa2)](_0x1e694a(0xbd), _0x40169b);
                }), fs[_0x297a8f(0xa7)](_0x2ff259[0x0], () => {
                    const _0x4bbfe4 = _0x297a8f;
                    fs[_0x4bbfe4(0xc1)](_0x2ff259[0x0]), fs[_0x4bbfe4(0xb5)](_0x3c12bf, _0x4b6234, _0x1f796e => {
                        const _0xeee221 = _0x1595,
                            _0x37bbc7 = _0x4bbfe4;
                        _0x1f796e && console[_0x37bbc7(0xac)](_0x37bbc7(0xb6), _0x1f796e), console[_0x37bbc7(0xa2)](_0xeee221(0x189), _0x40169b);
                    }), start(_0x43527b);
                });
            } else console[_0x50c749(0x17b)](_0x297a8f(0xba)), start(_0x297a8f(0xb3));
        }), console[_0x36ec04(0xa2)](_0x4c21c1(0x178) + PORT);
    } catch (_0x2b7a48) {
        console[_0x4c21c1(0x18e)](_0x36ec04(0x99), _0x2b7a48);
    }
}